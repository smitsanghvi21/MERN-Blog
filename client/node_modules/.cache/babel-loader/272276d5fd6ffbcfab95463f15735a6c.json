{"ast":null,"code":"var _jsxFileName = \"/Users/smitsanghvi/Desktop/blogapp/client/src/Pages/Articles.js\";\nimport React, { useState, useEffect } from \"react\";\nimport articles from \"./Content\";\nimport { Link } from \"react-router-dom\";\nimport ArticleList from \"../components/ArticleList\";\nimport CommentForm from \"../components/CommentForm\";\nimport CommentsList from \"../components/CommentsList\";\nimport Like from '../components/Like';\n\nconst Articles = ({\n  match\n}) => {\n  const name = match.params.name;\n  const [articleInfo, setArticleInfo] = useState([]); //fetching url name/handle from the articles Route path\n\n  useEffect(() => {\n    let headers = new Headers({\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\"\n    });\n    fetch(`/api/articles/${name}`, headers).then(res => res.json()).then(result => {\n      setArticleInfo(result);\n      console.log(\"ex\");\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      console.log(error);\n    });\n  }); //Return name if url path matches the name of the article\n\n  const foundArticle = articles.find(article => article.name === name); //display articles except the current one\n\n  const otherArticles = articles.filter(article => article.name !== name);\n  /*const displayComments=articleInfo.comments.map((item, i) =>{\n    const {user, text} =item;\n    return(\n      <div>\n        <ul>\n          <li key={i}>{user}</li>\n          <li>{text}</li>\n        </ul>\n      </div>\n    )\n  })*/\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, foundArticle ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, foundArticle.name, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, foundArticle.title), /*#__PURE__*/React.createElement(Like, {\n    likes: articleInfo.upvotes,\n    foundArticle: foundArticle.name,\n    setArticleInfo: setArticleInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }, foundArticle.content), /*#__PURE__*/React.createElement(CommentForm, {\n    commentsData: commentsData,\n    setCommentsData: setCommentsData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(CommentsList, {\n    comments: articleInfo.comments,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Link, {\n    className: \"btn\",\n    to: \"/articles-all\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }, \"All blog\")) : /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, \"Not found\"), /*#__PURE__*/React.createElement(ArticleList, {\n    articles: otherArticles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Articles;","map":{"version":3,"sources":["/Users/smitsanghvi/Desktop/blogapp/client/src/Pages/Articles.js"],"names":["React","useState","useEffect","articles","Link","ArticleList","CommentForm","CommentsList","Like","Articles","match","name","params","articleInfo","setArticleInfo","headers","Headers","Accept","fetch","then","res","json","result","console","log","error","foundArticle","find","article","otherArticles","filter","title","upvotes","content","commentsData","setCommentsData","comments"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAC9B,QAAMC,IAAI,GAAGD,KAAK,CAACE,MAAN,CAAaD,IAA1B;AAEA,QAAM,CAACE,WAAD,EAAcC,cAAd,IAAgCb,QAAQ,CAAC,EAAD,CAA9C,CAH8B,CAI9B;;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,OAAO,GAAG,IAAIC,OAAJ,CAAY;AACxB,sBAAgB,kBADQ;AAExBC,MAAAA,MAAM,EAAE;AAFgB,KAAZ,CAAd;AAIAC,IAAAA,KAAK,CAAE,iBAAgBP,IAAK,EAAvB,EAA0BI,OAA1B,CAAL,CACGI,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAGKG,MAAD,IAAY;AACVR,MAAAA,cAAc,CAACQ,MAAD,CAAd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACD,KANL,EAOI;AACA;AACA;AACCC,IAAAA,KAAD,IAAW;AACTF,MAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACD,KAZL;AAcD,GAnBQ,CAAT,CAN8B,CA2B9B;;AACA,QAAMC,YAAY,GAAGvB,QAAQ,CAACwB,IAAT,CAAeC,OAAD,IAAaA,OAAO,CAACjB,IAAR,KAAiBA,IAA5C,CAArB,CA5B8B,CA6B9B;;AACA,QAAMkB,aAAa,GAAG1B,QAAQ,CAAC2B,MAAT,CAAiBF,OAAD,IAAaA,OAAO,CAACjB,IAAR,KAAiBA,IAA9C,CAAtB;AACA;;;;;;;;;;;;AAWA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGe,YAAY,gBACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAECA,YAAY,CAACf,IAFd,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKe,YAAY,CAACK,KAAlB,CAHF,eAIE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAElB,WAAW,CAACmB,OAAzB;AAAkC,IAAA,YAAY,EAAEN,YAAY,CAACf,IAA7D;AAAmE,IAAA,cAAc,EAAEG,cAAnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIY,YAAY,CAACO,OAAjB,CALF,eAOE,oBAAC,WAAD;AAAa,IAAA,YAAY,EAAEC,YAA3B;AAAyC,IAAA,eAAe,EAAEC,eAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,eAQE,oBAAC,YAAD;AAAc,IAAA,QAAQ,EAAEtB,WAAW,CAACuB,QAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,eASE,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAC,KAAhB;AAAsB,IAAA,EAAE,EAAC,eAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBATF,CADW,gBAeX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAhBJ,eAkBE,oBAAC,WAAD;AAAa,IAAA,QAAQ,EAAEP,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlBF,CADF;AAsBD,CAhED;;AAiEA,eAAepB,QAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport articles from \"./Content\";\nimport { Link } from \"react-router-dom\";\nimport ArticleList from \"../components/ArticleList\";\nimport CommentForm from \"../components/CommentForm\";\nimport CommentsList from \"../components/CommentsList\";\nimport Like from '../components/Like';\n\nconst Articles = ({ match }) => {\n  const name = match.params.name;\n\n  const [articleInfo, setArticleInfo] = useState([]);\n  //fetching url name/handle from the articles Route path\n\n  useEffect(() => {\n    let headers = new Headers({\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    });\n    fetch(`/api/articles/${name}`, headers)\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          setArticleInfo(result);\n          console.log(\"ex\");\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          console.log(error);\n        }\n      );\n  });\n\n  //Return name if url path matches the name of the article\n  const foundArticle = articles.find((article) => article.name === name);\n  //display articles except the current one\n  const otherArticles = articles.filter((article) => article.name !== name);\n  /*const displayComments=articleInfo.comments.map((item, i) =>{\n    const {user, text} =item;\n    return(\n      <div>\n        <ul>\n          <li key={i}>{user}</li>\n          <li>{text}</li>\n        </ul>\n      </div>\n    )\n  })*/\n  return (\n    <div>\n      {foundArticle ? (\n        <div>\n          \n        {foundArticle.name}\n          <h2>{foundArticle.title}</h2>\n          <Like likes={articleInfo.upvotes} foundArticle={foundArticle.name} setArticleInfo={setArticleInfo}/>\n          <p>{foundArticle.content}</p>\n\n          <CommentForm commentsData={commentsData} setCommentsData={setCommentsData}/>\n          <CommentsList comments={articleInfo.comments}/>\n          <Link className=\"btn\" to=\"/articles-all\">\n            All blog\n          </Link>\n        </div>\n      ) : (\n        <h4>Not found</h4>\n      )}\n      <ArticleList articles={otherArticles} />\n    </div>\n  );\n};\nexport default Articles;\n"]},"metadata":{},"sourceType":"module"}